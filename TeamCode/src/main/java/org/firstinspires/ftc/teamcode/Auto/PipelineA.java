package org.firstinspires.ftc.teamcode.Auto;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.HashMap;

import org.opencv.core.*;
import org.opencv.core.Core.*;
//import org.opencv.features2d.FeatureDetector;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.*;
import org.opencv.objdetect.*;
import org.openftc.easyopencv.OpenCvPipeline;

/**
 * GripPipeline class.
 *
 * <p>An OpenCV pipeline generated by GRIP.
 *
 * @author GRIP
 */
public class PipelineA extends OpenCvPipeline {

    //Outputs
    private Mat cvFlipOutput = new Mat();
    private Mat hsvThreshold0Output = new Mat();
    private Mat hsvThreshold1Output = new Mat();
    private Mat hsvThreshold2Output = new Mat();
    private Mat hsvThreshold3Output = new Mat();
    private Mat cvAddOutput = new Mat();

    static {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    }

    /**
     * This is the primary method that runs the entire pipeline and updates the outputs.
     */
    public Mat processFrame (Mat source0) {
        // Step CV_flip0:
        Mat cvFlipSrc = source0;
        FlipCode cvFlipFlipcode = FlipCode.BOTH_AXES;
        cvFlip(cvFlipSrc, cvFlipFlipcode, cvFlipOutput);

        // Step HSV_Threshold0:
        Mat hsvThreshold0Input = cvFlipOutput;
        double[] hsvThreshold0Hue = {17.805755395683452, 80.74952050389102};
        double[] hsvThreshold0Saturation = {155.93525179856115, 255.0};
        double[] hsvThreshold0Value = {121.53776978417265, 255.0};
        hsvThreshold(hsvThreshold0Input, hsvThreshold0Hue, hsvThreshold0Saturation, hsvThreshold0Value, hsvThreshold0Output);

        // Step HSV_Threshold1:
        Mat hsvThreshold1Input = cvFlipOutput;
        double[] hsvThreshold1Hue = {58.273381294964025, 121.93548387096773};
        double[] hsvThreshold1Saturation = {79.53095150997845, 255.0};
        double[] hsvThreshold1Value = {167.40107913669064, 255.0};
        hsvThreshold(hsvThreshold1Input, hsvThreshold1Hue, hsvThreshold1Saturation, hsvThreshold1Value, hsvThreshold1Output);

        // Step HSV_Threshold2:
        Mat hsvThreshold2Input = cvFlipOutput;
        double[] hsvThreshold2Hue = {0.0, 6.4505119453924875};
        double[] hsvThreshold2Saturation = {144.46942446043167, 255.0};
        double[] hsvThreshold2Value = {38.98381294964029, 255.0};
        hsvThreshold(hsvThreshold2Input, hsvThreshold2Hue, hsvThreshold2Saturation, hsvThreshold2Value, hsvThreshold2Output);

        // Step HSV_Threshold3:
        Mat hsvThreshold3Input = cvFlipOutput;
        double[] hsvThreshold3Hue = {159.32203389830508, 180.0};
        double[] hsvThreshold3Saturation = {108.05084745762711, 255.0};
        double[] hsvThreshold3Value = {124.85875706214689, 255.0};
        hsvThreshold(hsvThreshold3Input, hsvThreshold3Hue, hsvThreshold3Saturation, hsvThreshold3Value, hsvThreshold3Output);

        // Step CV_add0:
        Mat cvAddSrc1 = hsvThreshold2Output;
        Mat cvAddSrc2 = hsvThreshold3Output;
        cvAdd(cvAddSrc1, cvAddSrc2, cvAddOutput);

        return source0;
    }

    /**
     * This method is a generated getter for the output of a CV_flip.
     * @return Mat output from CV_flip.
     */
    public Mat cvFlipOutput() {
        return cvFlipOutput;
    }

    /**
     * This method is a generated getter for the output of a HSV_Threshold.
     * @return Mat output from HSV_Threshold.
     */
    public Mat hsvThreshold0Output() {
        return hsvThreshold0Output;
    }

    /**
     * This method is a generated getter for the output of a HSV_Threshold.
     * @return Mat output from HSV_Threshold.
     */
    public Mat hsvThreshold1Output() {
        return hsvThreshold1Output;
    }

    /**
     * This method is a generated getter for the output of a HSV_Threshold.
     * @return Mat output from HSV_Threshold.
     */
    public Mat hsvThreshold2Output() {
        return hsvThreshold2Output;
    }

    /**
     * This method is a generated getter for the output of a HSV_Threshold.
     * @return Mat output from HSV_Threshold.
     */
    public Mat hsvThreshold3Output() {
        return hsvThreshold3Output;
    }

    /**
     * This method is a generated getter for the output of a CV_add.
     * @return Mat output from CV_add.
     */
    public Mat cvAddOutput() {
        return cvAddOutput;
    }


    /**
     * Code used for CV_flip.
     * Per OpenCV spec 0 -> flip on X axis.
     * >0 -> flip on Y axis.
     * <0 -> flip on both axes.
     */
    public enum FlipCode {
        X_AXIS(0),
        Y_AXIS(1),
        BOTH_AXES(-1);
        public final int value;
        FlipCode(int value) {
            this.value = value;
        }
    }

    /**
     * Flips an image along X, Y or both axes.
     * @param src Image to flip.
     * @param flipcode FlipCode of which direction to flip.
     * @param dst flipped version of the Image.
     */
    private void cvFlip(Mat src, FlipCode flipcode, Mat dst) {
        Core.flip(src, dst, flipcode.value);
    }

    /**
     * Segment an image based on hue, saturation, and value ranges.
     *
     * @param input The image on which to perform the HSL threshold.
     * @param hue The min and max hue
     * @param sat The min and max saturation
     * @param val The min and max value
     * @param out The image in which to store the output.
     */
    private void hsvThreshold(Mat input, double[] hue, double[] sat, double[] val,
                              Mat out) {
        Imgproc.cvtColor(input, out, Imgproc.COLOR_BGR2HSV);
        Core.inRange(out, new Scalar(hue[0], sat[0], val[0]),
                new Scalar(hue[1], sat[1], val[1]), out);
    }

    /**
     * Calculates the sum of two Mats.
     * @param src1 the first Mat
     * @param src2 the second Mat
     * @param out the Mat that is the sum of the two Mats
     */
    private void cvAdd(Mat src1, Mat src2, Mat out) {
        Core.add(src1, src2, out);
    }




}

